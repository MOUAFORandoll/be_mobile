// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 8984566840537087468),
      name: 'KeyUser',
      lastPropertyId: const obx_int.IdUid(5, 3050349477534242606),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6348612253164974944),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3624252355606891287),
            name: 'keySecret',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8832846444064727260),
            name: 'token',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 34511884449713588),
            name: 'refreshToken',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3050349477534242606),
            name: 'userId',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 528970694863214740),
      name: 'Lang',
      lastPropertyId: const obx_int.IdUid(2, 7392225789609482597),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5758480994236200392),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7392225789609482597),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 5589971371954137280),
      name: 'Localisation',
      lastPropertyId: const obx_int.IdUid(5, 421267395549205444),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 576028652935433197),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7973789328410402377),
            name: 'ville',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3296741169851625451),
            name: 'longitude',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 994297135078503455),
            name: 'latitude',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 421267395549205444),
            name: 'ip',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 1113314405807969848),
      name: 'Second',
      lastPropertyId: const obx_int.IdUid(2, 1939509048529786318),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4893917620272064576),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1939509048529786318),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 8515091795137785474),
      name: 'Theme',
      lastPropertyId: const obx_int.IdUid(2, 5624160313008426624),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 898959819284985380),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5624160313008426624),
            name: 'value',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 3111042122288968254),
      name: 'User',
      lastPropertyId: const obx_int.IdUid(12, 3169514915697841993),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1003019444414536860),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 9030123287430456540),
            name: 'userId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7194923917911908307),
            name: 'nom',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1981058460113358940),
            name: 'prenom',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7104273356431650241),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7884356085899434437),
            name: 'profile',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6408305374337865876),
            name: 'phone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1202883639022673218),
            name: 'dateCreated',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4427249840446802544),
            name: 'typeUser',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 5181578774780277422),
            name: 'solde',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 3169514915697841993),
            name: 'soldeBonus',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 6314683099039113893),
      name: 'YourDataModel',
      lastPropertyId: const obx_int.IdUid(2, 4387494669297644908),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 550131433720045414),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4387494669297644908),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 8280626420191203340),
      name: 'LivraisonPosition',
      lastPropertyId: const obx_int.IdUid(2, 8401013570103419353),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4601798035686055122),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8401013570103419353),
            name: 'livraison_id',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(9, 8280626420191203340),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [4969518057203688213],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        754203462009673773,
        5127329087435583877,
        3733723678809820577,
        3733861273943814581,
        1395444994505962781
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    KeyUser: obx_int.EntityDefinition<KeyUser>(
        model: _entities[0],
        toOneRelations: (KeyUser object) => [],
        toManyRelations: (KeyUser object) => {},
        getId: (KeyUser object) => object.id,
        setId: (KeyUser object, int id) {
          object.id = id;
        },
        objectToFB: (KeyUser object, fb.Builder fbb) {
          final keySecretOffset = fbb.writeString(object.keySecret);
          final tokenOffset = fbb.writeString(object.token);
          final refreshTokenOffset = fbb.writeString(object.refreshToken);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, keySecretOffset);
          fbb.addOffset(2, tokenOffset);
          fbb.addOffset(3, refreshTokenOffset);
          fbb.addInt64(4, object.userId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final keySecretParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final userIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final tokenParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final refreshTokenParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final object = KeyUser(
              keySecret: keySecretParam,
              userId: userIdParam,
              token: tokenParam,
              refreshToken: refreshTokenParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Lang: obx_int.EntityDefinition<Lang>(
        model: _entities[1],
        toOneRelations: (Lang object) => [],
        toManyRelations: (Lang object) => {},
        getId: (Lang object) => object.id,
        setId: (Lang object, int id) {
          object.id = id;
        },
        objectToFB: (Lang object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Lang(name: nameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Localisation: obx_int.EntityDefinition<Localisation>(
        model: _entities[2],
        toOneRelations: (Localisation object) => [],
        toManyRelations: (Localisation object) => {},
        getId: (Localisation object) => object.id,
        setId: (Localisation object, int id) {
          object.id = id;
        },
        objectToFB: (Localisation object, fb.Builder fbb) {
          final villeOffset = fbb.writeString(object.ville);
          final longitudeOffset = fbb.writeString(object.longitude);
          final latitudeOffset = fbb.writeString(object.latitude);
          final ipOffset = fbb.writeString(object.ip);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, villeOffset);
          fbb.addOffset(2, longitudeOffset);
          fbb.addOffset(3, latitudeOffset);
          fbb.addOffset(4, ipOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final villeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final longitudeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final latitudeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final ipParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final object = Localisation(
              ville: villeParam,
              longitude: longitudeParam,
              latitude: latitudeParam,
              ip: ipParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Second: obx_int.EntityDefinition<Second>(
        model: _entities[3],
        toOneRelations: (Second object) => [],
        toManyRelations: (Second object) => {},
        getId: (Second object) => object.id,
        setId: (Second object, int id) {
          object.id = id;
        },
        objectToFB: (Second object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Second(id: idParam, name: nameParam);

          return object;
        }),
    Theme: obx_int.EntityDefinition<Theme>(
        model: _entities[4],
        toOneRelations: (Theme object) => [],
        toManyRelations: (Theme object) => {},
        getId: (Theme object) => object.id,
        setId: (Theme object, int id) {
          object.id = id;
        },
        objectToFB: (Theme object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.value);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final valueParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final object = Theme(value: valueParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    User: obx_int.EntityDefinition<User>(
        model: _entities[5],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final nomOffset = fbb.writeString(object.nom);
          final prenomOffset = fbb.writeString(object.prenom);
          final emailOffset = fbb.writeString(object.email);
          final profileOffset = fbb.writeString(object.profile);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final dateCreatedOffset = fbb.writeString(object.dateCreated);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.userId);
          fbb.addOffset(2, nomOffset);
          fbb.addOffset(3, prenomOffset);
          fbb.addOffset(4, emailOffset);
          fbb.addOffset(5, profileOffset);
          fbb.addOffset(6, phoneOffset);
          fbb.addOffset(7, dateCreatedOffset);
          fbb.addInt64(8, object.typeUser);
          fbb.addFloat64(10, object.solde);
          fbb.addFloat64(11, object.soldeBonus);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final userIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final soldeParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final nomParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final prenomParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final typeUserParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final profileParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final dateCreatedParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final soldeBonusParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 26, 0);
          final object = User(
              userId: userIdParam,
              solde: soldeParam,
              nom: nomParam,
              prenom: prenomParam,
              typeUser: typeUserParam,
              email: emailParam,
              profile: profileParam,
              phone: phoneParam,
              dateCreated: dateCreatedParam,
              soldeBonus: soldeBonusParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    YourDataModel: obx_int.EntityDefinition<YourDataModel>(
        model: _entities[6],
        toOneRelations: (YourDataModel object) => [],
        toManyRelations: (YourDataModel object) => {},
        getId: (YourDataModel object) => object.id,
        setId: (YourDataModel object, int id) {
          object.id = id;
        },
        objectToFB: (YourDataModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = YourDataModel(id: idParam, name: nameParam);

          return object;
        }),
    LivraisonPosition: obx_int.EntityDefinition<LivraisonPosition>(
        model: _entities[7],
        toOneRelations: (LivraisonPosition object) => [],
        toManyRelations: (LivraisonPosition object) => {},
        getId: (LivraisonPosition object) => object.id,
        setId: (LivraisonPosition object, int id) {
          object.id = id;
        },
        objectToFB: (LivraisonPosition object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.livraison_id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final livraison_idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final object = LivraisonPosition(livraison_id: livraison_idParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [KeyUser] entity fields to define ObjectBox queries.
class KeyUser_ {
  /// See [KeyUser.id].
  static final id =
      obx.QueryIntegerProperty<KeyUser>(_entities[0].properties[0]);

  /// See [KeyUser.keySecret].
  static final keySecret =
      obx.QueryStringProperty<KeyUser>(_entities[0].properties[1]);

  /// See [KeyUser.token].
  static final token =
      obx.QueryStringProperty<KeyUser>(_entities[0].properties[2]);

  /// See [KeyUser.refreshToken].
  static final refreshToken =
      obx.QueryStringProperty<KeyUser>(_entities[0].properties[3]);

  /// See [KeyUser.userId].
  static final userId =
      obx.QueryIntegerProperty<KeyUser>(_entities[0].properties[4]);
}

/// [Lang] entity fields to define ObjectBox queries.
class Lang_ {
  /// See [Lang.id].
  static final id = obx.QueryIntegerProperty<Lang>(_entities[1].properties[0]);

  /// See [Lang.name].
  static final name = obx.QueryStringProperty<Lang>(_entities[1].properties[1]);
}

/// [Localisation] entity fields to define ObjectBox queries.
class Localisation_ {
  /// See [Localisation.id].
  static final id =
      obx.QueryIntegerProperty<Localisation>(_entities[2].properties[0]);

  /// See [Localisation.ville].
  static final ville =
      obx.QueryStringProperty<Localisation>(_entities[2].properties[1]);

  /// See [Localisation.longitude].
  static final longitude =
      obx.QueryStringProperty<Localisation>(_entities[2].properties[2]);

  /// See [Localisation.latitude].
  static final latitude =
      obx.QueryStringProperty<Localisation>(_entities[2].properties[3]);

  /// See [Localisation.ip].
  static final ip =
      obx.QueryStringProperty<Localisation>(_entities[2].properties[4]);
}

/// [Second] entity fields to define ObjectBox queries.
class Second_ {
  /// See [Second.id].
  static final id =
      obx.QueryIntegerProperty<Second>(_entities[3].properties[0]);

  /// See [Second.name].
  static final name =
      obx.QueryStringProperty<Second>(_entities[3].properties[1]);
}

/// [Theme] entity fields to define ObjectBox queries.
class Theme_ {
  /// See [Theme.id].
  static final id = obx.QueryIntegerProperty<Theme>(_entities[4].properties[0]);

  /// See [Theme.value].
  static final value =
      obx.QueryIntegerProperty<Theme>(_entities[4].properties[1]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// See [User.id].
  static final id = obx.QueryIntegerProperty<User>(_entities[5].properties[0]);

  /// See [User.userId].
  static final userId =
      obx.QueryIntegerProperty<User>(_entities[5].properties[1]);

  /// See [User.nom].
  static final nom = obx.QueryStringProperty<User>(_entities[5].properties[2]);

  /// See [User.prenom].
  static final prenom =
      obx.QueryStringProperty<User>(_entities[5].properties[3]);

  /// See [User.email].
  static final email =
      obx.QueryStringProperty<User>(_entities[5].properties[4]);

  /// See [User.profile].
  static final profile =
      obx.QueryStringProperty<User>(_entities[5].properties[5]);

  /// See [User.phone].
  static final phone =
      obx.QueryStringProperty<User>(_entities[5].properties[6]);

  /// See [User.dateCreated].
  static final dateCreated =
      obx.QueryStringProperty<User>(_entities[5].properties[7]);

  /// See [User.typeUser].
  static final typeUser =
      obx.QueryIntegerProperty<User>(_entities[5].properties[8]);

  /// See [User.solde].
  static final solde =
      obx.QueryDoubleProperty<User>(_entities[5].properties[9]);

  /// See [User.soldeBonus].
  static final soldeBonus =
      obx.QueryDoubleProperty<User>(_entities[5].properties[10]);
}

/// [YourDataModel] entity fields to define ObjectBox queries.
class YourDataModel_ {
  /// See [YourDataModel.id].
  static final id =
      obx.QueryIntegerProperty<YourDataModel>(_entities[6].properties[0]);

  /// See [YourDataModel.name].
  static final name =
      obx.QueryStringProperty<YourDataModel>(_entities[6].properties[1]);
}

/// [LivraisonPosition] entity fields to define ObjectBox queries.
class LivraisonPosition_ {
  /// See [LivraisonPosition.id].
  static final id =
      obx.QueryIntegerProperty<LivraisonPosition>(_entities[7].properties[0]);

  /// See [LivraisonPosition.livraison_id].
  static final livraison_id =
      obx.QueryIntegerProperty<LivraisonPosition>(_entities[7].properties[1]);
}
